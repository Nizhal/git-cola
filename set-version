#!/usr/bin/env python
import argparse
import datetime
import os
import sys


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('version')
    args = parser.parse_args()
    version = args.version

    # Old workflow: move relnotes/unreleased.rst to relnotes/vX.Y.rst
    #ReleaseNotes(version).update()
    # Old workflow: separate file per release
    #CreateReleaseNotes(version).update()
    PyVersion(version).update()
    PyNsistVersion(version).update()
    GitColaAppDataVersion(version).update()
    GitDagAppDataVersion(version).update()
    # Old workflow: updated relnotes.rst with the latest relnotes/vX.Y.rst
    #RelnotesVersion(version).update()
    RelnotesStableVersion(version).update()
    os.system('git diff')

    return 0


def warn(msg):
    sys.stderr.write('warning: %s\n' % msg)


def num_version(version):
    if version.startswith('v'):
        version = version[1:]
    return version


def tag_version(version):
    if not version.startswith('v'):
        version = 'v' + version
    return version


def is_section_end(txt):
    return (txt.startswith('=') and
            txt.endswith('=') and
            txt == ('=' * len(txt)))


class Version(object):

    path = None

    def __init__(self, version):
        self.num_version = num_version(version)
        self.tag_version = tag_version(version)
        self.readonly = False

    def match(self):
        return False

    def replacement(self, txt):
        return txt

    def read(self):
        with open(self.path, 'r') as f:
            return f.read()

    def write(self, content):
        if self.readonly:
            return
        with open(self.path, 'w') as f:
            f.write(content)

    def filter(self, content):
        if not content:
            return ''
        final_content = []
        for txt in content.splitlines():
            if self.match(txt):
                final_content.append(self.replacement(txt))
            else:
                final_content.append(txt)
        return '\n'.join(final_content) + '\n'

    def update(self):
        if self.readonly:
            self.warn()
            return
        content = self.filter(self.read())
        self.write(content)
        self.warn()

    def warn(self):
        pass


class CreateReleaseNotes(Version):

    def __init__(self, version):
        super(CreateReleaseNotes, self).__init__(version)
        self.path = 'share/doc/git-cola/relnotes/%s.rst' % self.tag_version
        self.readonly = os.path.exists(self.path)

    def read(self):
        anchor = '.. _%s:' % self.tag_version
        git_cola = 'git-cola %s' % self.tag_version
        underline = '=' * len(git_cola)
        output = [anchor, '', git_cola, underline]
        return '\n'.join(output) + '\n'

    def warn(self):
        if self.readonly:
            warn('%s already exists!' % self.path)
        elif not os.path.exists(self.path):
            warn('%s does not exist!' % self.path)

    def filter(self, content):
        return content


class ReleaseNotes(Version):

    def __init__(self, version):
        super(ReleaseNotes, self).__init__(version)
        self.path = 'share/doc/git-cola/relnotes/%s.rst' % self.tag_version
        self.readonly = os.path.exists(self.path)

    def read(self):
        path = 'share/doc/git-cola/relnotes/unreleased.rst'
        with open(path, 'r') as f:
            return f.read()

    def warn(self):
        if self.readonly:
            warn('%s already exists!' % self.path)
        elif not os.path.exists(self.path):
            warn('%s does not exist!' % self.path)

    def filter(self, content):
        section = ''
        last = ''
        capture = False

        anchor = '.. _%s:' % self.tag_version
        git_cola = 'git-cola %s' % self.tag_version
        underline = '=' * len(git_cola)

        output = [anchor, '', git_cola, underline]

        for txt in content.splitlines():
            if is_section_end(txt):
                section = last
                continue

            if (section == 'Unreleased Topics' and
                    txt != 'Development Version'):
                capture = True
            else:
                capture = False

            if capture:
                output.append(txt)

            last = txt

        return '\n'.join(output)


class PyVersion(Version):

    path = 'cola/_version.py'

    def match(self, txt):
        return txt.startswith('VERSION =')

    def replacement(self, txt):
        return "VERSION = '%s'" % self.num_version


class AppDataVersion(Version):
    """Append tagged versions to the *.appdata.xml files"""

    def match(self, txt):
        """Modify the file when we find the closing </releases> tag"""
        return txt.startswith('  </releases>')

    def replacement(self, txt):
        """Append a <release version=... /> xml tag to appinfo.xml """
        version = self.num_version
        now = datetime.datetime.now()
        date = now.strftime('%Y-%m-%d')
        return '    <release version="%s" date="%s" />\n%s' % (version, date, txt)


class GitColaAppDataVersion(AppDataVersion):
    """Add new releases to git-cola.appdata.xml"""

    path = 'share/metainfo/git-cola.appdata.xml'


class GitDagAppDataVersion(AppDataVersion):
    """Add new releases to git-dag.appdata.xml"""

    path = 'share/metainfo/git-dag.appdata.xml'


class PyNsistVersion(Version):
    """Update pynsist.cfg with the current version"""

    path = 'pynsist.cfg'

    def __init__(self, version):
        super(PyNsistVersion, self).__init__(version)
        self.section = ''

    def match(self, txt):
        if txt.startswith('['):
            self.section = txt[1:-1]
            return False
        return self.section == 'Application' and txt.startswith('version = ')

    def replacement(self, txt):
        return 'version = %s' % self.num_version


class RelnotesVersion(Version):

    path = 'share/doc/git-cola/relnotes.rst'

    def __init__(self, version):
        super(RelnotesVersion, self).__init__(version)
        self.last = ''

    def match(self, txt):
        result = (self.last.endswith('relnotes/unreleased')
                  and not txt.endswith('relnotes/%s' % self.tag_version))
        self.last = txt
        return result

    def replacement(self, txt):
        return '    relnotes/%s\n%s' % (self.tag_version, txt)


class RelnotesStableVersion(Version):

    path = 'share/doc/git-cola/relnotes.rst'

    def __init__(self, version):
        super(RelnotesStableVersion, self).__init__(version)
        self.last = ''
        self.section = ''

    def match(self, txt):
        if is_section_end(txt):
            self.section = self.last
            return False

        result = (self.section == 'Latest Release' and
                    txt.startswith(':ref:`v'))
        self.last = txt
        return result

    def replacement(self, txt):
        version = self.tag_version
        return (r':ref:`%s <%s>` is the latest stable release.'
                % (version, version))


if __name__ == '__main__':
    sys.exit(main())
